apply plugin: 'com.google.protobuf'
apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 32

    defaultConfig {
        applicationId "flwr.android_client"
        // API level 14+ is required for TLS since Google Play Services v10.2
        minSdkVersion 24
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        debug { minifyEnabled false }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }


    dataBinding {
        enabled = true
    }

//    aaptOptions {
//        noCompress "tflite"
//    }

    lintOptions {
        disable 'GoogleAppIndexingWarning', 'HardcodedText', 'InvalidPackage'
        textReport true
        textOutput "stdout"
    }
}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.11.0' }
    plugins {
        grpc { artifact = 'io.grpc:protoc-gen-grpc-java:1.27.2' // CURRENT_GRPC_VERSION
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { option 'lite' }
            }
            task.plugins {
                grpc { // Options added to --grpc_out
                    option 'lite' }
            }
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation project(path: ':transfer_api')


    implementation 'org.tensorflow:tensorflow-lite:+'
    implementation 'org.tensorflow:tensorflow-lite-select-tf-ops:+'

    implementation 'io.grpc:grpc-okhttp:1.27.2' // CURRENT_GRPC_VERSION
    implementation 'io.grpc:grpc-protobuf-lite:1.27.2' // CURRENT_GRPC_VERSION
    implementation 'io.grpc:grpc-stub:1.27.2' // CURRENT_GRPC_VERSION
    implementation 'javax.annotation:javax.annotation-api:1.2'

    implementation platform('com.google.firebase:firebase-bom:29.0.4')
    implementation 'com.google.firebase:firebase-ml-modeldownloader'

    implementation 'com.google.firebase:firebase-analytics'

    def lifecycle_version = '2.1.0-rc01'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    //network library
    //HTTP client
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
    implementation 'com.squareup.okhttp:okhttp:2.7.5'

    implementation 'com.google.android.material:material:1.0.0'

    //image picker library
    implementation 'com.github.dhaval2404:imagepicker:2.1'
}

//def modelUrl = 'https://www.dropbox.com/s/tubgpepk2q6xiny/models.zip?dl=1'
//def modelArchivePath = "${buildDir}/model.zip"
//def modelTargetLocation = 'src/main/assets/model'


//def dataUrl = 'https://www.dropbox.com/s/coeixr4kh8ljw6o/cifar10.zip?dl=1'
//def dataArchivePath = "${buildDir}/data.zip"
//def dataTargetLocation = 'src/main/assets/data'

task downloadModelAndData(type: DefaultTask) {
    doFirst {
        println "Downloading and unpacking the model..."
        mkdir project.buildDir
    }

    doLast {

//        ant.mkdir(dir: modelTargetLocation)
//        ant.mkdir(dir: dataTargetLocation)
//
//        ant.get(src: modelUrl, dest: modelArchivePath)
//        ant.unzip(src: modelArchivePath, dest: modelTargetLocation)
//        ant.delete(file: modelArchivePath)
//
//        ant.get(src: dataUrl, dest: dataArchivePath)
//        ant.unzip(src: dataArchivePath, dest: dataTargetLocation)
//        ant.delete(file: dataArchivePath)

    }
}

preBuild.dependsOn downloadModelAndData
